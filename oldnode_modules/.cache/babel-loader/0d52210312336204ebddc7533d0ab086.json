{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Madjid Sadallah\\\\Documents\\\\GitHub\\\\CoGenDash\\\\lad-creator\\\\src\\\\components\\\\library\\\\panels_lib\\\\cpanel_items.js\",\n    _s = $RefreshSig$();\n\nimport \"../library-view.css\";\nimport React, { useContext, useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { Button } from \"react-bootstrap\";\nimport { CPanelContext } from \"../cpanels\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const chartContext = /*#__PURE__*/React.createContext();\n\nconst CPanelItem = props => {\n  _s();\n\n  const [currentCPanel, setCurrentCPanel, currentPanel, setCurrentPanel, pList, setpList, panels, visualizations, indicators] = useContext(CPanelContext);\n  const [currentVisualization, setCurrentVisualization] = useState();\n\n  const getPanElement = i => {\n    panels.map(item => {\n      if (item.id == i) setCurrentPanel(item);\n    }); //console.log(currentPanel)\n  };\n\n  const getVizElement = elt => {\n    if (!elt) return;\n    visualizations.map(item => {\n      if (item.id == elt.visualization_id) setCurrentVisualization(item);\n    });\n  };\n\n  const decodeChart = elt => {\n    if (!elt) return;\n    let blob = elt.chart;\n    if (typeof blob === \"string\") return blob;\n    const {\n      data\n    } = blob;\n    const img = new Buffer.from(data).toString(\"ascii\");\n    return img;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentCPanel === undefined ? \" \" : /*#__PURE__*/_jsxDEV(Modal, {\n      show: props.show,\n      backdrop: \"static\",\n      keyboard: true,\n      size: \"lg\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      dialogClassName: \"modal-style\",\n      scrollable: true,\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: currentCPanel.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-dark\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"Select a panel to insert\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"formselect\",\n                  name: \"panel\",\n                  onChange: e => getPanElement(e.target.value),\n                  children: panels.map(item => {\n                    return /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: item.id,\n                      children: item.title\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 77,\n                      columnNumber: 34\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"2\",\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  children: [\"Description : \", currentPanel.description, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                  children: \"Associated indicator \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 23\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  children: \"Associated visualization\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          size: \"sm\",\n          variant: \"secondary\",\n          onClick: props.onClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          size: \"sm\",\n          variant: \"secondary\",\n          onClick: props.onSave,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n};\n\n_s(CPanelItem, \"9nBYJLsRdsQSVb8w5qO7PgLsJmk=\");\n\n_c = CPanelItem;\nexport default CPanelItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"CPanelItem\");","map":{"version":3,"sources":["C:/Users/Madjid Sadallah/Documents/GitHub/CoGenDash/lad-creator/src/components/library/panels_lib/cpanel_items.js"],"names":["React","useContext","useState","Modal","Button","CPanelContext","chartContext","createContext","CPanelItem","props","currentCPanel","setCurrentCPanel","currentPanel","setCurrentPanel","pList","setpList","panels","visualizations","indicators","currentVisualization","setCurrentVisualization","getPanElement","i","map","item","id","getVizElement","elt","visualization_id","decodeChart","blob","chart","data","img","Buffer","from","toString","undefined","show","title","e","target","value","description","onClose","onSave"],"mappings":";;;AAAA,OAAO,qBAAP;AACA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,aAAT,QAA8B,YAA9B;;;AAEA,OAAO,MAAMC,YAAY,gBAAGN,KAAK,CAACO,aAAN,EAArB;;AAEP,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC5B,QAAM,CACJC,aADI,EAEJC,gBAFI,EAGJC,YAHI,EAIJC,eAJI,EAKJC,KALI,EAMJC,QANI,EAOJC,MAPI,EAQJC,cARI,EASJC,UATI,IAUFjB,UAAU,CAACI,aAAD,CAVd;AAYA,QAAM,CAACc,oBAAD,EAAuBC,uBAAvB,IAAmDlB,QAAQ,EAAjE;;AAEE,QAAMmB,aAAa,GAAEC,CAAD,IAAK;AACrBN,IAAAA,MAAM,CAACO,GAAP,CAAYC,IAAD,IAAQ;AACf,UAAGA,IAAI,CAACC,EAAL,IAAWH,CAAd,EAAiBT,eAAe,CAACW,IAAD,CAAf;AACpB,KAFD,EADqB,CAIrB;AACD,GALH;;AAOF,QAAME,aAAa,GAAIC,GAAD,IAAS;AAC7B,QAAG,CAACA,GAAJ,EAAS;AACTV,IAAAA,cAAc,CAACM,GAAf,CAAoBC,IAAD,IAAQ;AACzB,UAAGA,IAAI,CAACC,EAAL,IAAWE,GAAG,CAACC,gBAAlB,EAAoCR,uBAAuB,CAACI,IAAD,CAAvB;AACvC,KAFC;AAGD,GALD;;AAMA,QAAMK,WAAW,GAAIF,GAAD,IAAS;AAC3B,QAAI,CAACA,GAAL,EAAU;AACV,QAAIG,IAAI,GAACH,GAAG,CAACI,KAAb;AACA,QAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B,OAAOA,IAAP;AAC9B,UAAM;AAAEE,MAAAA;AAAF,QAAWF,IAAjB;AACA,UAAMG,GAAG,GAAG,IAAIC,MAAM,CAACC,IAAX,CAAgBH,IAAhB,EAAsBI,QAAtB,CAA+B,OAA/B,CAAZ;AAEA,WAAOH,GAAP;AACD,GARD;;AAUA,sBACE;AAAA,cACGvB,aAAa,KAAK2B,SAAlB,GACC,GADD,gBAGG,QAAC,KAAD;AACE,MAAA,IAAI,EAAE5B,KAAK,CAAC6B,IADd;AAEE,MAAA,QAAQ,EAAC,QAFX;AAGE,MAAA,QAAQ,EAAE,IAHZ;AAIE,MAAA,IAAI,EAAC,IAJP;AAKE,yBAAgB,+BALlB;AAME,MAAA,eAAe,EAAC,aANlB;AAOE,MAAA,UAAU,MAPZ;AAQE,MAAA,QAAQ,MARV;AAAA,8BAUE,QAAC,KAAD,CAAO,MAAP;AAAA,+BACE,QAAC,KAAD,CAAO,KAAP;AAAA,oBAAc5B,aAAa,CAAC6B;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAVF,eAaE,QAAC,KAAD,CAAO,IAAP;AAAA,+BACE;AAAO,UAAA,SAAS,EAAC,kBAAjB;AAAA,iCACE;AAAA,oCAGE;AAAA,sCACE;AAAA,uCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAA,uCACA;AAAQ,kBAAA,SAAS,EAAC,YAAlB;AAA+B,kBAAA,IAAI,EAAC,OAApC;AACE,kBAAA,QAAQ,EAAGC,CAAD,IAAOnB,aAAa,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CADhC;AAAA,4BAGK1B,MAAM,CAACO,GAAP,CAAYC,IAAD,IAAU;AACpB,wCAAO;AAAQ,sBAAA,KAAK,EAAEA,IAAI,CAACC,EAApB;AAAA,gCAAyBD,IAAI,CAACe;AAA9B;AAAA;AAAA;AAAA;AAAA,4BAAP;AACD,mBAFA;AAHL;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,eAiBE;AAAA,qCACE;AAAI,gBAAA,OAAO,EAAC,GAAZ;AAAA,uCAAgB;AAAA,+CAAkB3B,YAAY,CAAC+B,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAjBF,eAoBE;AAAA,sCACA;AAAA,wCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,eAEA;AAAA,uCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,sBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,oBApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAbF,eA0CE,QAAC,KAAD,CAAO,MAAP;AAAA,gCACE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,IAAI,EAAC,IAFP;AAGE,UAAA,OAAO,EAAC,WAHV;AAIE,UAAA,OAAO,EAAElC,KAAK,CAACmC,OAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eASE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,IAAI,EAAC,IAFP;AAGE,UAAA,OAAO,EAAC,WAHV;AAIE,UAAA,OAAO,EAAEnC,KAAK,CAACoC,MAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cA1CF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJN,mBADF;AAqED,CA3GD;;GAAMrC,U;;KAAAA,U;AA4GN,eAAeA,UAAf","sourcesContent":["import \"../library-view.css\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { CPanelContext } from \"../cpanels\";\r\n\r\nexport const chartContext = React.createContext();\r\n\r\nconst CPanelItem = (props) => {\r\n  const [\r\n    currentCPanel,\r\n    setCurrentCPanel,\r\n    currentPanel,\r\n    setCurrentPanel,\r\n    pList,\r\n    setpList,\r\n    panels,\r\n    visualizations,\r\n    indicators\r\n  ] = useContext(CPanelContext);\r\n\r\n  const [currentVisualization, setCurrentVisualization ] = useState();\r\n  \r\n    const getPanElement=(i)=>{\r\n        panels.map((item)=>{\r\n            if(item.id == i) setCurrentPanel(item)\r\n        });\r\n        //console.log(currentPanel)\r\n      }\r\n\r\n  const getVizElement = (elt) => {\r\n    if(!elt) return;\r\n    visualizations.map((item)=>{\r\n      if(item.id == elt.visualization_id) setCurrentVisualization(item)\r\n  });\r\n  }\r\n  const decodeChart = (elt) => {\r\n    if (!elt) return;\r\n    let blob=elt.chart\r\n    if (typeof blob === \"string\") return blob;\r\n    const { data } = blob;\r\n    const img = new Buffer.from(data).toString(\"ascii\");\r\n\r\n    return img;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {currentCPanel === undefined ? (\r\n        \" \"\r\n      ) : (\r\n          <Modal\r\n            show={props.show}\r\n            backdrop=\"static\"\r\n            keyboard={true}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            dialogClassName=\"modal-style\"\r\n            scrollable\r\n            centered\r\n          >\r\n            <Modal.Header>\r\n              <Modal.Title>{currentCPanel.title}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <table className=\"table table-dark\">\r\n                <tbody>\r\n                  \r\n                  \r\n                  <tr>\r\n                    <td><b>Select a panel to insert</b></td>\r\n                    <td>\r\n                    <select className=\"formselect\" name=\"panel\" \r\n                      onChange={(e) => getPanElement(e.target.value)} \r\n                    >                    \r\n                        {panels.map((item) => {\r\n                          return <option value={item.id}>{item.title}</option>;\r\n                        })}\r\n                        \r\n                      </select>\r\n                    </td>\r\n                    \r\n                  </tr>      \r\n                  <tr>\r\n                    <td colSpan='2'><i>Description : {currentPanel.description} </i></td>\r\n                  </tr>            \r\n                  <tr>   \r\n                  <td><i>Associated indicator </i> </td>               \r\n                  <td><i>Associated visualization</i></td>               \r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"button\"\r\n                size=\"sm\"\r\n                variant=\"secondary\"\r\n                onClick={props.onClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                type=\"submit\"\r\n                size=\"sm\"\r\n                variant=\"secondary\"\r\n                onClick={props.onSave}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default CPanelItem;\r\n"]},"metadata":{},"sourceType":"module"}