{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Madjid Sadallah\\\\Documents\\\\GitHub\\\\CoGenDash\\\\lad-creator\\\\src\\\\components\\\\library\\\\panels_lib\\\\cpanel_items.js\",\n    _s = $RefreshSig$();\n\nimport \"../library-view.css\";\nimport React, { useContext, useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { Button } from \"react-bootstrap\";\nimport { CPanelContext } from \"../cpanels\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const chartContext = /*#__PURE__*/React.createContext();\n\nconst CPanelItem = props => {\n  _s();\n\n  const [currentCPanel, setCurrentCPanel, currentPanel, setCurrentPanel, pList, setpList, panels, visualizations, indicators] = useContext(CPanelContext);\n  const [currentVisualization, setCurrentVisualization] = useState();\n  const [currentIndicator, setCurrentIndicator] = useState();\n\n  const getPanElement = i => {\n    let ind = null;\n    let viz = null;\n    panels.map(item => {\n      if (item.id == i) {\n        setCurrentPanel(item);\n        indicators.map(item => {\n          if (item.id == currentPanel.indicator_id) ind = item;\n        });\n        visualizations.map(item => {\n          if (item.id == currentPanel.visualization_id) viz = item;\n        });\n      }\n    }); //console.log(currentPanel)\n  };\n\n  const getVizElement = () => {\n    console.log(currentPanel);\n    let res = {\n      title: \" \",\n      description: \" \",\n      chart: null\n    };\n    if (!currentPanel) return res;\n    visualizations.map(item => {\n      if (item.id == currentPanel.visualization_id) res = item;\n    }); //setCurrentVisualization(res);\n\n    return res;\n  };\n\n  const getIndElement = () => {\n    let res = {\n      title: \" \",\n      description: \" \"\n    };\n    if (!currentPanel) return res;\n    indicators.map(item => {\n      if (item.id == currentPanel.indicator_id) res = item;\n    });\n    setCurrentIndicator(res);\n    return res;\n  };\n\n  const decodeChart = elt => {\n    if (!elt) return;\n    let blob = elt.chart;\n    if (typeof blob === \"string\") return blob;\n    const {\n      data\n    } = blob;\n    const img = new Buffer.from(data).toString(\"ascii\");\n    return img;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentCPanel === undefined ? \" \" : /*#__PURE__*/_jsxDEV(Modal, {\n      show: props.show,\n      backdrop: \"static\",\n      keyboard: true,\n      size: \"lg\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      dialogClassName: \"modal-style\",\n      scrollable: true,\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: currentCPanel.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-dark\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"Select a panel to insert\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"formselect\",\n                  name: \"panel\",\n                  onChange: e => getPanElement(e.target.value),\n                  children: panels.map(item => {\n                    return /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: item.id,\n                      children: item.title\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 113,\n                      columnNumber: 32\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"2\",\n                children: [\"Description : \", /*#__PURE__*/_jsxDEV(\"i\", {\n                  children: currentPanel.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 35\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"Associated indicator : \", /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: getIndElement().title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 44\n                }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 75\n                }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n                  children: getIndElement().description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"Associated visualization : \", /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: getVizElement().title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 48\n                }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chart_box\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    alt: \"Chart\",\n                    src: decodeChart(getVizElement())\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 132,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          size: \"sm\",\n          variant: \"secondary\",\n          onClick: props.onClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          size: \"sm\",\n          variant: \"secondary\",\n          onClick: props.onSave,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(CPanelItem, \"lsnWZgB3J9I9JS5K/y7yLswAy5E=\");\n\n_c = CPanelItem;\nexport default CPanelItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"CPanelItem\");","map":{"version":3,"sources":["C:/Users/Madjid Sadallah/Documents/GitHub/CoGenDash/lad-creator/src/components/library/panels_lib/cpanel_items.js"],"names":["React","useContext","useState","Modal","Button","CPanelContext","chartContext","createContext","CPanelItem","props","currentCPanel","setCurrentCPanel","currentPanel","setCurrentPanel","pList","setpList","panels","visualizations","indicators","currentVisualization","setCurrentVisualization","currentIndicator","setCurrentIndicator","getPanElement","i","ind","viz","map","item","id","indicator_id","visualization_id","getVizElement","console","log","res","title","description","chart","getIndElement","decodeChart","elt","blob","data","img","Buffer","from","toString","undefined","show","e","target","value","onClose","onSave"],"mappings":"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","sourcesContent":["import \"../library-view.css\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { CPanelContext } from \"../cpanels\";\r\n\r\nexport const chartContext = React.createContext();\r\n\r\nconst CPanelItem = (props) => {\r\n  const [\r\n    currentCPanel,\r\n    setCurrentCPanel,\r\n    currentPanel,\r\n    setCurrentPanel,\r\n    pList,\r\n    setpList,\r\n    panels,\r\n    visualizations,\r\n    indicators,\r\n  ] = useContext(CPanelContext);\r\n\r\n  const [currentVisualization, setCurrentVisualization] = useState();\r\n  const [currentIndicator, setCurrentIndicator] = useState();\r\n\r\n  const getPanElement = (i) => {\r\n    let ind = null;\r\n    let viz = null;\r\n    panels.map((item) => {\r\n      if (item.id == i) {\r\n        setCurrentPanel(item);\r\n        indicators.map((item) => {\r\n          if (item.id == currentPanel.indicator_id) ind=item;\r\n        });\r\n        visualizations.map((item) => {\r\n          if (item.id == currentPanel.visualization_id)\r\n            viz=item;\r\n        });\r\n      }\r\n    });\r\n    //console.log(currentPanel)\r\n  };\r\n\r\n  const getVizElement = () => {\r\n    console.log(currentPanel);\r\n    let res = {\r\n      title: \" \",\r\n      description: \" \",\r\n      chart: null,\r\n    };\r\n    if (!currentPanel) return res;\r\n    visualizations.map((item) => {\r\n      if (item.id == currentPanel.visualization_id) res = item;\r\n    });\r\n    //setCurrentVisualization(res);\r\n    return res;\r\n  };\r\n\r\n  const getIndElement = () => {\r\n    let res = {\r\n      title: \" \",\r\n      description: \" \",\r\n    };\r\n    if (!currentPanel) return res;\r\n    indicators.map((item) => {\r\n      if (item.id == currentPanel.indicator_id) res = item;\r\n    });\r\n    setCurrentIndicator(res);\r\n    return res;\r\n  };\r\n\r\n  const decodeChart = (elt) => {\r\n    if (!elt) return;\r\n    let blob = elt.chart;\r\n    if (typeof blob === \"string\") return blob;\r\n    const { data } = blob;\r\n    const img = new Buffer.from(data).toString(\"ascii\");\r\n\r\n    return img;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {currentCPanel === undefined ? (\r\n        \" \"\r\n      ) : (\r\n        <Modal\r\n          show={props.show}\r\n          backdrop=\"static\"\r\n          keyboard={true}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          dialogClassName=\"modal-style\"\r\n          scrollable\r\n          centered\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title>{currentCPanel.title}</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <table className=\"table table-dark\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>\r\n                    <b>Select a panel to insert</b>\r\n                  </td>\r\n                  <td>\r\n                    <select\r\n                      className=\"formselect\"\r\n                      name=\"panel\"\r\n                      onChange={(e) => getPanElement(e.target.value)}\r\n                    >\r\n                      {panels.map((item) => {\r\n                        return <option value={item.id}>{item.title}</option>;\r\n                      })}\r\n                    </select>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td colSpan=\"2\">\r\n                    Description : <i>{currentPanel.description}</i>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    Associated indicator : <b>{getIndElement().title}</b> <br />\r\n                    <i>{getIndElement().description}</i>\r\n                  </td>\r\n                  <td>\r\n                    Associated visualization : <b>{getVizElement().title}</b>{\" \"}\r\n                    <br />\r\n                    <div className=\"chart_box\">\r\n                      <img alt=\"Chart\" src={decodeChart(getVizElement())} />\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              type=\"button\"\r\n              size=\"sm\"\r\n              variant=\"secondary\"\r\n              onClick={props.onClose}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              size=\"sm\"\r\n              variant=\"secondary\"\r\n              onClick={props.onSave}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default CPanelItem;\r\n"]},"metadata":{},"sourceType":"module"}