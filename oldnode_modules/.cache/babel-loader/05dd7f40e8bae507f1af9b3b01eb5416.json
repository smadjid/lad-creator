{"ast":null,"code":"function stringify(obj) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$EOL = _ref.EOL,\n      EOL = _ref$EOL === void 0 ? '\\n' : _ref$EOL,\n      _ref$finalEOL = _ref.finalEOL,\n      finalEOL = _ref$finalEOL === void 0 ? true : _ref$finalEOL,\n      _ref$replacer = _ref.replacer,\n      replacer = _ref$replacer === void 0 ? null : _ref$replacer,\n      spaces = _ref.spaces;\n\n  var EOF = finalEOL ? EOL : '';\n  var str = JSON.stringify(obj, replacer, spaces);\n  return str.replace(/\\n/g, EOL) + EOF;\n}\n\nfunction stripBom(content) {\n  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified\n  if (Buffer.isBuffer(content)) content = content.toString('utf8');\n  return content.replace(/^\\uFEFF/, '');\n}\n\nmodule.exports = {\n  stringify: stringify,\n  stripBom: stripBom\n};","map":{"version":3,"sources":["C:/Users/Madjid Sadallah/Documents/GitHub/CoGenDash/lad-creator/node_modules/jsonfile/utils.js"],"names":["stringify","obj","EOL","finalEOL","replacer","spaces","EOF","str","JSON","replace","stripBom","content","Buffer","isBuffer","toString","module","exports"],"mappings":"AAAA,SAASA,SAAT,CAAoBC,GAApB,EAAwF;AAAA,iFAAJ,EAAI;AAAA,sBAA7DC,GAA6D;AAAA,MAA7DA,GAA6D,yBAAvD,IAAuD;AAAA,2BAAjDC,QAAiD;AAAA,MAAjDA,QAAiD,8BAAtC,IAAsC;AAAA,2BAAhCC,QAAgC;AAAA,MAAhCA,QAAgC,8BAArB,IAAqB;AAAA,MAAfC,MAAe,QAAfA,MAAe;;AACtF,MAAMC,GAAG,GAAGH,QAAQ,GAAGD,GAAH,GAAS,EAA7B;AACA,MAAMK,GAAG,GAAGC,IAAI,CAACR,SAAL,CAAeC,GAAf,EAAoBG,QAApB,EAA8BC,MAA9B,CAAZ;AAEA,SAAOE,GAAG,CAACE,OAAJ,CAAY,KAAZ,EAAmBP,GAAnB,IAA0BI,GAAjC;AACD;;AAED,SAASI,QAAT,CAAmBC,OAAnB,EAA4B;AAC1B;AACA,MAAIC,MAAM,CAACC,QAAP,CAAgBF,OAAhB,CAAJ,EAA8BA,OAAO,GAAGA,OAAO,CAACG,QAAR,CAAiB,MAAjB,CAAV;AAC9B,SAAOH,OAAO,CAACF,OAAR,CAAgB,SAAhB,EAA2B,EAA3B,CAAP;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiB;AAAEhB,EAAAA,SAAS,EAATA,SAAF;AAAaU,EAAAA,QAAQ,EAARA;AAAb,CAAjB","sourcesContent":["function stringify (obj, { EOL = '\\n', finalEOL = true, replacer = null, spaces } = {}) {\n  const EOF = finalEOL ? EOL : ''\n  const str = JSON.stringify(obj, replacer, spaces)\n\n  return str.replace(/\\n/g, EOL) + EOF\n}\n\nfunction stripBom (content) {\n  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified\n  if (Buffer.isBuffer(content)) content = content.toString('utf8')\n  return content.replace(/^\\uFEFF/, '')\n}\n\nmodule.exports = { stringify, stripBom }\n"]},"metadata":{},"sourceType":"script"}