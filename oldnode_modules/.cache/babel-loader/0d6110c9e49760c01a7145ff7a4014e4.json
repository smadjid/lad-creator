{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Madjid Sadallah\\\\Documents\\\\GitHub\\\\CoGenDash\\\\lad-creator\\\\src\\\\components\\\\library\\\\cpanels.js\",\n    _s = $RefreshSig$();\n\nimport \"./library-view.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Actions from \"./panels_lib/cpanel_actions\";\nimport axios from \"axios\";\nimport { AddBoxRounded, EditRounded, HighlightOffRounded } from \"@material-ui/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CPanelContext = /*#__PURE__*/React.createContext();\n\nfunction CPanels() {\n  _s();\n\n  const [cpanels, setCPanels] = useState([]);\n  const [visualizations, setVisualizations] = useState([]);\n  const [indicators, setIndicators] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [currentCPanel, setCurrentCPanel] = useState();\n  const [currentIndicator, setCurrentIndicator] = useState();\n  const [currentVisualization, setCurrentVisualization] = useState();\n  const cpanelContext = [currentCPanel, setCurrentCPanel, currentIndicator, setCurrentIndicator, currentVisualization, setCurrentVisualization, indicators, visualizations];\n  const [creationMode, setCreationMode] = useState(true);\n\n  const handleModalClose = () => {\n    setShowModal(false);\n  };\n\n  const handleModalSave = () => {\n    setCurrentCPanel({ ...currentCPanel,\n      visualization_id: currentVisualization.id\n    });\n    let element = currentCPanel;\n    element.visualization_id = currentVisualization.id;\n    element.indicator_id = currentIndicator.id;\n    console.log(element);\n    if (creationMode) axios.post(\"http://localhost:3001/cpanels\", element).then(() => {\n      setCPanels([...cpanels, {\n        data: element,\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }]);\n      updateDisplay();\n    });else axios.put(\"http://localhost:3001/cpanels\", element).then(res => {\n      setCPanels(cpanels.map(item => {\n        return item.id === element.id ? {\n          id: item.id,\n          title: item.title,\n          description: item.description,\n          visualization_id: item.visualization_id,\n          indicator_id: item.indicator_id\n        } : item;\n      }));\n      updateDisplay();\n    });\n    setShowModal(false);\n    updateDisplay();\n  };\n\n  const deleteCPanel = id => {\n    window.confirm(\"Are you sure you want to delete this type of cpanel?\") ? axios.delete(`http://localhost:3001/cpanels/${id}`).then(res => {\n      setCPanels(cpanels.filter(item => {\n        return item.id !== id;\n      }));\n    }) : id = id;\n    updateDisplay();\n  };\n\n  const getCPanels = () => {\n    axios.get(\"http://localhost:3001/cpanels\").then(res => {\n      setCPanels(res.data);\n    });\n  };\n\n  const getVisualizations = () => {\n    axios.get(\"http://localhost:3001/visualizations\").then(res => {\n      setVisualizations(res.data);\n    });\n  };\n\n  const getIndicators = () => {\n    axios.get(\"http://localhost:3001/indicators\").then(res => {\n      setIndicators(res.data);\n    });\n  };\n\n  useEffect(() => {\n    getCPanels();\n    getVisualizations();\n    getIndicators();\n  }, []);\n\n  const updateDisplay = () => {\n    getCPanels();\n    getVisualizations();\n    getIndicators();\n  };\n\n  const decodeChart = blob => {\n    if (!blob) return;\n    if (typeof blob === \"string\") return blob;\n    const {\n      data\n    } = blob;\n    const img = new Buffer.from(data).toString(\"ascii\");\n    return img;\n  };\n\n  const fetchVizElement = id => {\n    if (typeof id === 'undefined') return {\n      title: null,\n      chart: null\n    };else {\n      let elt = visualizations.find(x => x.id === id);\n      if (elt) return elt;else return {\n        title: null,\n        chart: null\n      };\n    }\n  };\n\n  const fetchIndElement = id => {\n    if (typeof id === 'undefined') return;else {\n      let elt = indicators.find(x => x.id === id);\n      if (elt) return elt.title;\n    }\n  };\n\n  const CreateNewCPanel = () => {\n    const item = {\n      title: \"New\",\n      description: \"Description\",\n      visualization_id: null,\n      indicator_id: null\n    };\n    setCurrentCPanel(item);\n    setCreationMode(true);\n    setShowModal(true);\n    return;\n  };\n\n  const EditCPanel = item => {\n    indicators.map(elt => {\n      if (elt.id == item.indicator_id) setCurrentIndicator(elt);\n    });\n    visualizations.map(elt => {\n      if (elt.id == item.visualization_id) setCurrentVisualization(elt);\n    });\n    setCurrentCPanel(item);\n    setCreationMode(false);\n    setShowModal(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CPanelContext.Provider, {\n    value: cpanelContext,\n    children: [/*#__PURE__*/_jsxDEV(Actions, {\n      title: \"un titre\",\n      show: showModal,\n      mode: \"Creation\",\n      cpanels: cpanels,\n      setCPanels: setCPanels,\n      updateDisplay: updateDisplay,\n      onClose: handleModalClose,\n      onSave: handleModalSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success\",\n        onClick: CreateNewCPanel,\n        children: [/*#__PURE__*/_jsxDEV(AddBoxRounded, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), \" \\xA0 New cpanel type\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-bordered table-hover table-dark table-striped text-md-start\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"#\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Indicator\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Representation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: cpanels.map(item => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"row\",\n              children: item.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: fetchIndElement(item.indicator_id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                children: fetchVizElement(item.visualization_id).title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 22\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chart_box\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  alt: \"Chart\",\n                  src: decodeChart(fetchVizElement(item.visualization_id).chart)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-sm btn-outline-primary\",\n                onClick: () => EditCPanel(item),\n                children: /*#__PURE__*/_jsxDEV(EditRounded, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-sm btn-outline-danger\",\n                onClick: () => deleteCPanel(item.id),\n                children: /*#__PURE__*/_jsxDEV(HighlightOffRounded, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 17\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CPanels, \"WFUg/vqHwz68OtftpRD5W00IDFk=\");\n\n_c = CPanels;\nexport default CPanels;\n\nvar _c;\n\n$RefreshReg$(_c, \"CPanels\");","map":{"version":3,"sources":["C:/Users/Madjid Sadallah/Documents/GitHub/CoGenDash/lad-creator/src/components/library/cpanels.js"],"names":["React","useState","useEffect","Actions","axios","AddBoxRounded","EditRounded","HighlightOffRounded","CPanelContext","createContext","CPanels","cpanels","setCPanels","visualizations","setVisualizations","indicators","setIndicators","showModal","setShowModal","currentCPanel","setCurrentCPanel","currentIndicator","setCurrentIndicator","currentVisualization","setCurrentVisualization","cpanelContext","creationMode","setCreationMode","handleModalClose","handleModalSave","visualization_id","id","element","indicator_id","console","log","post","then","data","headers","updateDisplay","put","res","map","item","title","description","deleteCPanel","window","confirm","delete","filter","getCPanels","get","getVisualizations","getIndicators","decodeChart","blob","img","Buffer","from","toString","fetchVizElement","chart","elt","find","x","fetchIndElement","CreateNewCPanel","EditCPanel"],"mappings":"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","sourcesContent":["import \"./library-view.css\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Actions from \"./panels_lib/cpanel_actions\";\r\nimport axios from \"axios\";\r\nimport {\r\n  AddBoxRounded,\r\n  EditRounded,\r\n  HighlightOffRounded,\r\n} from \"@material-ui/icons\";\r\n\r\nexport const CPanelContext = React.createContext();\r\n\r\nfunction CPanels() {\r\n  const [cpanels, setCPanels] = useState([]);\r\n  const [visualizations, setVisualizations] = useState([]);\r\n  const [indicators, setIndicators] = useState([]);\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  \r\n  const [currentCPanel, setCurrentCPanel] = useState();\r\n  const [currentIndicator, setCurrentIndicator] = useState();\r\n  const [currentVisualization, setCurrentVisualization] = useState();\r\n  \r\n  const cpanelContext = [\r\n    currentCPanel,\r\n    setCurrentCPanel,\r\n    currentIndicator,\r\n    setCurrentIndicator,\r\n    currentVisualization,\r\n    setCurrentVisualization,\r\n    indicators,\r\n    visualizations\r\n  ];\r\n\r\n  const [creationMode, setCreationMode] = useState(true);\r\n\r\n  const handleModalClose = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const handleModalSave = () => {\r\n\r\n    setCurrentCPanel({...currentCPanel,visualization_id:currentVisualization.id});\r\n\r\n    let element = currentCPanel;\r\n    element.visualization_id=currentVisualization.id;\r\n    element.indicator_id=currentIndicator.id;\r\n    console.log(element);\r\n     \r\n    if (creationMode)\r\n      axios.post(\"http://localhost:3001/cpanels\", element).then(() => {\r\n        setCPanels([\r\n          ...cpanels,\r\n          {\r\n            data: element,\r\n            headers: { \"Content-Type\": \"multipart/form-data\" },\r\n          },\r\n        ]);\r\n        updateDisplay();\r\n      });\r\n    else\r\n      axios.put(\"http://localhost:3001/cpanels\", element).then((res) => {\r\n        setCPanels(\r\n          cpanels.map((item) => {\r\n            return item.id === element.id\r\n              ? {\r\n                  id: item.id,\r\n                  title: item.title,\r\n                  description: item.description,\r\n                  visualization_id: item.visualization_id,\r\n                  indicator_id: item.indicator_id,\r\n                }\r\n              : item;\r\n          })\r\n        );\r\n        updateDisplay();\r\n      });\r\n\r\n    setShowModal(false);\r\n    updateDisplay();\r\n  };\r\n\r\n  const deleteCPanel = (id) => {\r\n    window.confirm(\"Are you sure you want to delete this type of cpanel?\")\r\n      ? axios.delete(`http://localhost:3001/cpanels/${id}`).then((res) => {\r\n          setCPanels(\r\n            cpanels.filter((item) => {\r\n              return item.id !== id;\r\n            })\r\n          );\r\n        })\r\n      : (id = id);\r\n    updateDisplay();\r\n  };\r\n\r\n  const getCPanels = () => {\r\n    axios.get(\"http://localhost:3001/cpanels\").then((res) => {\r\n      setCPanels(res.data);\r\n    });\r\n  };\r\n\r\n  const getVisualizations = () => {\r\n    axios.get(\"http://localhost:3001/visualizations\").then((res) => {\r\n      setVisualizations(res.data);\r\n    });\r\n  };\r\n  const getIndicators = () => {\r\n    axios.get(\"http://localhost:3001/indicators\").then((res) => {\r\n      setIndicators(res.data);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCPanels();\r\n    getVisualizations();\r\n    getIndicators();\r\n  }, []);\r\n\r\n  const updateDisplay = () => {\r\n    getCPanels();\r\n    getVisualizations();\r\n    getIndicators();\r\n  };\r\n\r\n  const decodeChart = (blob) => {\r\n    if (!blob) return;\r\n    if (typeof blob === \"string\") return blob;\r\n    const { data } = blob;\r\n    const img = new Buffer.from(data).toString(\"ascii\");\r\n\r\n    return img;\r\n  };\r\n\r\n  const fetchVizElement = (id) =>{\r\n      \r\n      if(typeof id === 'undefined') return{title:null,chart:null};\r\n      else{\r\n          let elt = visualizations.find(x  => x.id === id) \r\n          if(elt) return elt\r\n          else return{title:null,chart:null};\r\n      }\r\n  }\r\n\r\n  const fetchIndElement = (id) =>{\r\n      \r\n    if(typeof id === 'undefined') return;\r\n    else{\r\n        let elt = indicators.find(x  => x.id === id) \r\n        if(elt) return elt.title;\r\n    }\r\n}\r\n\r\n\r\n  const CreateNewCPanel = () => {\r\n    const item = {\r\n      title: \"New\",\r\n      description: \"Description\",\r\n      visualization_id: null,\r\n      indicator_id: null,\r\n    };\r\n\r\n    setCurrentCPanel(item);\r\n    setCreationMode(true);\r\n    setShowModal(true);\r\n\r\n    return;\r\n  };\r\n  const EditCPanel = (item) => {\r\n    \r\n    indicators.map((elt)=>{\r\n        if(elt.id == item.indicator_id) setCurrentIndicator(elt)\r\n    });\r\n\r\n\r\n    visualizations.map((elt)=>{\r\n        if(elt.id == item.visualization_id) setCurrentVisualization(elt)\r\n    });\r\n\r\n    setCurrentCPanel(item);\r\n    \r\n    setCreationMode(false);\r\n    setShowModal(true);\r\n  };\r\n  return (\r\n    <CPanelContext.Provider value={cpanelContext}>\r\n      <Actions\r\n        title=\"un titre\"\r\n        show={showModal}\r\n        mode=\"Creation\"\r\n        cpanels={cpanels}\r\n        setCPanels={setCPanels}\r\n        updateDisplay={updateDisplay}\r\n        onClose={handleModalClose}\r\n        onSave={handleModalSave}\r\n      />\r\n\r\n      <div>\r\n        <button className=\"btn btn-success\" onClick={CreateNewCPanel}>\r\n          <AddBoxRounded /> &nbsp; New cpanel type\r\n        </button>\r\n      </div>\r\n      <table className=\"table table-bordered table-hover table-dark table-striped text-md-start\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Title</th>\r\n            <th scope=\"col\">Indicator</th>\r\n            <th scope=\"col\">Representation</th>\r\n            <th scope=\"col\">Description</th>\r\n            <th scope=\"col\">Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {cpanels.map((item) => {\r\n            return (\r\n              <tr key={item.id}>\r\n                <th scope=\"row\">{item.id}</th>\r\n                <td>{item.title}</td>\r\n                <td>{fetchIndElement(item.indicator_id)}</td>\r\n                <td> <i>{fetchVizElement(item.visualization_id).title}</i>\r\n                  <div className=\"chart_box\">                  \r\n                    <img alt=\"Chart\" src={decodeChart(fetchVizElement(item.visualization_id).chart)} />\r\n                  </div>\r\n                </td>\r\n                <td>{item.description}</td>\r\n\r\n                <td>\r\n                  <button\r\n                    className=\"btn btn-sm btn-outline-primary\"\r\n                    onClick={() => EditCPanel(item)}\r\n                  >\r\n                    <EditRounded />\r\n                  </button>\r\n                  <button\r\n                    className=\"btn btn-sm btn-outline-danger\"\r\n                    onClick={() => deleteCPanel(item.id)}\r\n                  >\r\n                    <HighlightOffRounded />\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </CPanelContext.Provider>\r\n  );\r\n}\r\n\r\nexport default CPanels;\r\n"]},"metadata":{},"sourceType":"module"}