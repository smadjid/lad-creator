{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/Madjid Sadallah/Documents/GitHub/CoGenDash/lad-creator/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/Madjid Sadallah/Documents/GitHub/CoGenDash/lad-creator/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _fs;\n\ntry {\n  _fs = require('graceful-fs');\n} catch (_) {\n  _fs = require('fs');\n}\n\nvar universalify = require('universalify');\n\nvar _require = require('./utils'),\n    stringify = _require.stringify,\n    stripBom = _require.stripBom;\n\nfunction _readFile(_x) {\n  return _readFile2.apply(this, arguments);\n}\n\nfunction _readFile2() {\n  _readFile2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n    var options,\n        fs,\n        shouldThrow,\n        data,\n        obj,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n            if (typeof options === 'string') {\n              options = {\n                encoding: options\n              };\n            }\n\n            fs = options.fs || _fs;\n            shouldThrow = 'throws' in options ? options.throws : true;\n            _context.next = 6;\n            return universalify.fromCallback(fs.readFile)(file, options);\n\n          case 6:\n            data = _context.sent;\n            data = stripBom(data);\n            _context.prev = 8;\n            obj = JSON.parse(data, options ? options.reviver : null);\n            _context.next = 20;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](8);\n\n            if (!shouldThrow) {\n              _context.next = 19;\n              break;\n            }\n\n            _context.t0.message = \"\".concat(file, \": \").concat(_context.t0.message);\n            throw _context.t0;\n\n          case 19:\n            return _context.abrupt(\"return\", null);\n\n          case 20:\n            return _context.abrupt(\"return\", obj);\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[8, 12]]);\n  }));\n  return _readFile2.apply(this, arguments);\n}\n\nvar readFile = universalify.fromPromise(_readFile);\n\nfunction readFileSync(file) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof options === 'string') {\n    options = {\n      encoding: options\n    };\n  }\n\n  var fs = options.fs || _fs;\n  var shouldThrow = 'throws' in options ? options.throws : true;\n\n  try {\n    var content = fs.readFileSync(file, options);\n    content = stripBom(content);\n    return JSON.parse(content, options.reviver);\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = \"\".concat(file, \": \").concat(err.message);\n      throw err;\n    } else {\n      return null;\n    }\n  }\n}\n\nfunction _writeFile(_x2, _x3) {\n  return _writeFile2.apply(this, arguments);\n}\n\nfunction _writeFile2() {\n  _writeFile2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file, obj) {\n    var options,\n        fs,\n        str,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            fs = options.fs || _fs;\n            str = stringify(obj, options);\n            _context2.next = 5;\n            return universalify.fromCallback(fs.writeFile)(file, str, options);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _writeFile2.apply(this, arguments);\n}\n\nvar writeFile = universalify.fromPromise(_writeFile);\n\nfunction writeFileSync(file, obj) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var fs = options.fs || _fs;\n  var str = stringify(obj, options); // not sure if fs.writeFileSync returns anything, but just in case\n\n  return fs.writeFileSync(file, str, options);\n}\n\nvar jsonfile = {\n  readFile: readFile,\n  readFileSync: readFileSync,\n  writeFile: writeFile,\n  writeFileSync: writeFileSync\n};\nmodule.exports = jsonfile;","map":{"version":3,"sources":["C:/Users/Madjid Sadallah/Documents/GitHub/CoGenDash/lad-creator/node_modules/jsonfile/index.js"],"names":["_fs","require","_","universalify","stringify","stripBom","_readFile","file","options","encoding","fs","shouldThrow","throws","fromCallback","readFile","data","obj","JSON","parse","reviver","message","fromPromise","readFileSync","content","err","_writeFile","str","writeFile","writeFileSync","jsonfile","module","exports"],"mappings":"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","sourcesContent":["let _fs\ntry {\n  _fs = require('graceful-fs')\n} catch (_) {\n  _fs = require('fs')\n}\nconst universalify = require('universalify')\nconst { stringify, stripBom } = require('./utils')\n\nasync function _readFile (file, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  const fs = options.fs || _fs\n\n  const shouldThrow = 'throws' in options ? options.throws : true\n\n  let data = await universalify.fromCallback(fs.readFile)(file, options)\n\n  data = stripBom(data)\n\n  let obj\n  try {\n    obj = JSON.parse(data, options ? options.reviver : null)\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = `${file}: ${err.message}`\n      throw err\n    } else {\n      return null\n    }\n  }\n\n  return obj\n}\n\nconst readFile = universalify.fromPromise(_readFile)\n\nfunction readFileSync (file, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  const fs = options.fs || _fs\n\n  const shouldThrow = 'throws' in options ? options.throws : true\n\n  try {\n    let content = fs.readFileSync(file, options)\n    content = stripBom(content)\n    return JSON.parse(content, options.reviver)\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = `${file}: ${err.message}`\n      throw err\n    } else {\n      return null\n    }\n  }\n}\n\nasync function _writeFile (file, obj, options = {}) {\n  const fs = options.fs || _fs\n\n  const str = stringify(obj, options)\n\n  await universalify.fromCallback(fs.writeFile)(file, str, options)\n}\n\nconst writeFile = universalify.fromPromise(_writeFile)\n\nfunction writeFileSync (file, obj, options = {}) {\n  const fs = options.fs || _fs\n\n  const str = stringify(obj, options)\n  // not sure if fs.writeFileSync returns anything, but just in case\n  return fs.writeFileSync(file, str, options)\n}\n\nconst jsonfile = {\n  readFile,\n  readFileSync,\n  writeFile,\n  writeFileSync\n}\n\nmodule.exports = jsonfile\n"]},"metadata":{},"sourceType":"script"}