{"ast":null,"code":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar ui = require('@grafana/ui');\n\nvar data = require('@grafana/data');\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n\nvar standardRegions = ['af-south-1', 'ap-east-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ap-south-1', 'ap-southeast-1', 'ap-southeast-2', 'ca-central-1', 'cn-north-1', 'cn-northwest-1', 'eu-central-1', 'eu-north-1', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'me-south-1', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-gov-east-1', 'us-gov-west-1', 'us-iso-east-1', 'us-isob-east-1', 'us-west-1', 'us-west-2'];\n\n(function (AwsAuthType) {\n  AwsAuthType[\"Keys\"] = \"keys\";\n  AwsAuthType[\"Credentials\"] = \"credentials\";\n  AwsAuthType[\"Default\"] = \"default\";\n  AwsAuthType[\"EC2IAMRole\"] = \"ec2_iam_role\";\n  /**\r\n   * @deprecated use default\r\n   */\n\n  AwsAuthType[\"ARN\"] = \"arn\";\n})(exports.AwsAuthType || (exports.AwsAuthType = {}));\n\nvar awsAuthProviderOptions = [{\n  label: 'Workspace IAM Role',\n  value: exports.AwsAuthType.EC2IAMRole\n}, {\n  label: 'AWS SDK Default',\n  value: exports.AwsAuthType.Default\n}, {\n  label: 'Access & secret key',\n  value: exports.AwsAuthType.Keys\n}, {\n  label: 'Credentials file',\n  value: exports.AwsAuthType.Credentials\n}];\n\nvar toOption = function (value) {\n  return {\n    value: value,\n    label: value\n  };\n};\n\nvar ConnectionConfig = function (props) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n  var _k = __read(React.useState((props.standardRegions || standardRegions).map(toOption)), 2),\n      regions = _k[0],\n      setRegions = _k[1];\n\n  var loadRegions = props.loadRegions,\n      onOptionsChange = props.onOptionsChange,\n      _l = props.skipHeader,\n      skipHeader = _l === void 0 ? false : _l,\n      _m = props.skipEndpoint,\n      skipEndpoint = _m === void 0 ? false : _m;\n  var options = props.options;\n  var profile = options.jsonData.profile;\n\n  if (profile === undefined) {\n    profile = options.database;\n  }\n\n  var settings = window.grafanaBootData.settings;\n  var awsAllowedAuthProviders = (_a = settings.awsAllowedAuthProviders) !== null && _a !== void 0 ? _a : [exports.AwsAuthType.Default, exports.AwsAuthType.Keys, exports.AwsAuthType.Credentials];\n  var awsAssumeRoleEnabled = (_b = settings.awsAssumeRoleEnabled) !== null && _b !== void 0 ? _b : true;\n  var currentProvider = awsAuthProviderOptions.find(function (p) {\n    return p.value === options.jsonData.authType;\n  });\n  React.useEffect(function () {\n    // Make sure a authType exists in the current model\n    if (!currentProvider && awsAllowedAuthProviders.length) {\n      onOptionsChange(__assign(__assign({}, options), {\n        jsonData: __assign(__assign({}, options.jsonData), {\n          authType: awsAllowedAuthProviders[0]\n        })\n      }));\n    }\n  }, [currentProvider, options, onOptionsChange]);\n  React.useEffect(function () {\n    if (!loadRegions) {\n      return;\n    }\n\n    loadRegions().then(function (regions) {\n      return setRegions(regions.map(toOption));\n    });\n  }, [loadRegions]);\n  return React__default.createElement(ui.FieldSet, {\n    label: skipHeader ? '' : 'Connection Details',\n    \"data-testid\": \"connection-config\"\n  }, React__default.createElement(ui.InlineField, {\n    label: \"Authentication Provider\",\n    labelWidth: 28,\n    tooltip: \"Specify which AWS credentials chain to use.\"\n  }, React__default.createElement(ui.Select, {\n    className: \"width-30\",\n    value: currentProvider,\n    options: awsAuthProviderOptions.filter(function (opt) {\n      return awsAllowedAuthProviders.includes(opt.value);\n    }),\n    defaultValue: options.jsonData.authType,\n    onChange: function (option) {\n      data.onUpdateDatasourceJsonDataOptionSelect(props, 'authType')(option);\n    }\n  })), options.jsonData.authType === 'credentials' && React__default.createElement(ui.InlineField, {\n    label: \"Credentials Profile Name\",\n    labelWidth: 28,\n    tooltip: \"Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.\"\n  }, React__default.createElement(ui.Input, {\n    className: \"width-30\",\n    placeholder: \"default\",\n    value: profile,\n    onChange: data.onUpdateDatasourceJsonDataOption(props, 'profile')\n  })), options.jsonData.authType === 'keys' && React__default.createElement(React__default.Fragment, null, React__default.createElement(ui.InlineField, {\n    label: \"Access Key ID\",\n    labelWidth: 28\n  }, ((_c = props.options.secureJsonFields) === null || _c === void 0 ? void 0 : _c.accessKey) ? React__default.createElement(ui.ButtonGroup, {\n    className: \"width-30\"\n  }, React__default.createElement(ui.Input, {\n    disabled: true,\n    placeholder: \"Configured\"\n  }), React__default.createElement(ui.ToolbarButton, {\n    icon: \"edit\",\n    tooltip: \"Edit Access Key ID\",\n    type: \"button\",\n    onClick: data.onUpdateDatasourceResetOption(props, 'accessKey')\n  })) : React__default.createElement(ui.Input, {\n    className: \"width-30\",\n    value: (_e = (_d = options.secureJsonData) === null || _d === void 0 ? void 0 : _d.accessKey) !== null && _e !== void 0 ? _e : '',\n    onChange: data.onUpdateDatasourceSecureJsonDataOption(props, 'accessKey')\n  })), React__default.createElement(ui.InlineField, {\n    label: \"Secret Access Key\",\n    labelWidth: 28\n  }, ((_f = props.options.secureJsonFields) === null || _f === void 0 ? void 0 : _f.secretKey) ? React__default.createElement(ui.ButtonGroup, {\n    className: \"width-30\"\n  }, React__default.createElement(ui.Input, {\n    disabled: true,\n    placeholder: \"Configured\"\n  }), React__default.createElement(ui.ToolbarButton, {\n    icon: \"edit\",\n    type: \"button\",\n    tooltip: \"Edit Secret Access Key\",\n    onClick: data.onUpdateDatasourceResetOption(props, 'secretKey')\n  })) : React__default.createElement(ui.Input, {\n    className: \"width-30\",\n    value: (_h = (_g = options.secureJsonData) === null || _g === void 0 ? void 0 : _g.secretKey) !== null && _h !== void 0 ? _h : '',\n    onChange: data.onUpdateDatasourceSecureJsonDataOption(props, 'secretKey')\n  }))), awsAssumeRoleEnabled && React__default.createElement(React__default.Fragment, null, React__default.createElement(ui.InlineField, {\n    label: \"Assume Role ARN\",\n    labelWidth: 28,\n    tooltip: \"Optionally, specify the ARN of a role to assume. Specifying a role here will ensure that the selected authentication provider is used to assume the specified role rather than using the credentials directly. Leave blank if you don't need to assume a role at all\"\n  }, React__default.createElement(ui.Input, {\n    className: \"width-30\",\n    placeholder: \"arn:aws:iam:*\",\n    value: options.jsonData.assumeRoleArn || '',\n    onChange: data.onUpdateDatasourceJsonDataOption(props, 'assumeRoleArn')\n  })), React__default.createElement(ui.InlineField, {\n    label: \"External ID\",\n    labelWidth: 28,\n    tooltip: \"If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.\"\n  }, React__default.createElement(ui.Input, {\n    className: \"width-30\",\n    placeholder: \"External ID\",\n    value: options.jsonData.externalId || '',\n    onChange: data.onUpdateDatasourceJsonDataOption(props, 'externalId')\n  }))), !skipEndpoint && React__default.createElement(ui.InlineField, {\n    label: \"Endpoint\",\n    labelWidth: 28,\n    tooltip: \"Optionally, specify a custom endpoint for the service\"\n  }, React__default.createElement(ui.Input, {\n    className: \"width-30\",\n    placeholder: (_j = props.defaultEndpoint) !== null && _j !== void 0 ? _j : 'https://{service}.{region}.amazonaws.com',\n    value: options.jsonData.endpoint || '',\n    onChange: data.onUpdateDatasourceJsonDataOption(props, 'endpoint')\n  })), React__default.createElement(ui.InlineField, {\n    label: \"Default Region\",\n    labelWidth: 28,\n    tooltip: \"Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.\"\n  }, React__default.createElement(ui.Select, {\n    className: \"width-30\",\n    value: regions.find(function (region) {\n      return region.value === options.jsonData.defaultRegion;\n    }),\n    options: regions,\n    defaultValue: options.jsonData.defaultRegion,\n    allowCustomValue: true,\n    onChange: data.onUpdateDatasourceJsonDataOptionSelect(props, 'defaultRegion'),\n    formatCreateLabel: function (r) {\n      return \"Use region: \" + r;\n    }\n  })), props.children);\n};\n\nexports.ConnectionConfig = ConnectionConfig;\nexports.awsAuthProviderOptions = awsAuthProviderOptions;\nexports.standardRegions = standardRegions;","map":{"version":3,"sources":["../src/regions.ts","../src/types.ts","../src/providers.ts","../src/ConnectionConfig.tsx"],"names":["AwsAuthType","useState","useEffect","React","FieldSet","InlineField","Select","onUpdateDatasourceJsonDataOptionSelect","Input","onUpdateDatasourceJsonDataOption","ButtonGroup","ToolbarButton","onUpdateDatasourceResetOption","onUpdateDatasourceSecureJsonDataOption"],"mappings":"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","sourcesContent":["export const standardRegions: string[] = [\n  'af-south-1',\n  'ap-east-1',\n  'ap-northeast-1',\n  'ap-northeast-2',\n  'ap-northeast-3',\n  'ap-south-1',\n  'ap-southeast-1',\n  'ap-southeast-2',\n  'ca-central-1',\n  'cn-north-1',\n  'cn-northwest-1',\n  'eu-central-1',\n  'eu-north-1',\n  'eu-west-1',\n  'eu-west-2',\n  'eu-west-3',\n  'me-south-1',\n  'sa-east-1',\n  'us-east-1',\n  'us-east-2',\n  'us-gov-east-1',\n  'us-gov-west-1',\n  'us-iso-east-1',\n  'us-isob-east-1',\n  'us-west-1',\n  'us-west-2',\n];\n","import { DataSourceJsonData } from '@grafana/data';\n\nexport enum AwsAuthType {\n  Keys = 'keys',\n  Credentials = 'credentials',\n  Default = 'default', // was 'arn',\n  EC2IAMRole = 'ec2_iam_role',\n  /**\n   * @deprecated use default\n   */\n  ARN = 'arn',\n}\n\nexport interface AwsAuthDataSourceJsonData extends DataSourceJsonData {\n  authType?: AwsAuthType;\n  assumeRoleArn?: string;\n  externalId?: string;\n  profile?: string; // Credentials profile name, as specified in ~/.aws/credentials\n  defaultRegion?: string; // region if it is not defined by your credentials file\n  endpoint?: string;\n}\n\nexport interface AwsAuthDataSourceSecureJsonData {\n  accessKey?: string;\n  secretKey?: string;\n}\n","import { SelectableValue } from '@grafana/data';\nimport { AwsAuthType } from './types';\n\nexport const awsAuthProviderOptions = [\n  {\n    label: 'Workspace IAM Role',\n    value: AwsAuthType.EC2IAMRole,\n  },\n  {\n    label: 'AWS SDK Default',\n    value: AwsAuthType.Default,\n  },\n  {\n    label: 'Access & secret key',\n    value: AwsAuthType.Keys,\n  },\n  {\n    label: 'Credentials file',\n    value: AwsAuthType.Credentials,\n  },\n] as Array<SelectableValue<AwsAuthType>>;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Input, Select, InlineField, ButtonGroup, ToolbarButton, FieldSet } from '@grafana/ui';\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceResetOption,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n} from '@grafana/data';\n\nimport { standardRegions } from './regions';\nimport { AwsAuthDataSourceJsonData, AwsAuthDataSourceSecureJsonData, AwsAuthType } from './types';\nimport { awsAuthProviderOptions } from './providers';\n\nconst toOption = (value: string) => ({ value, label: value });\n\nexport interface ConnectionConfigProps<J = AwsAuthDataSourceJsonData, S = AwsAuthDataSourceSecureJsonData>\n  extends DataSourcePluginOptionsEditorProps<J, S> {\n  standardRegions?: string[];\n  loadRegions?: () => Promise<string[]>;\n  defaultEndpoint?: string;\n  skipHeader?: boolean;\n  skipEndpoint?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const ConnectionConfig: FC<ConnectionConfigProps> = (props: ConnectionConfigProps) => {\n  const [regions, setRegions] = useState((props.standardRegions || standardRegions).map(toOption));\n  const { loadRegions, onOptionsChange, skipHeader = false, skipEndpoint = false } = props;\n  const options = props.options;\n  let profile = options.jsonData.profile;\n  if (profile === undefined) {\n    profile = options.database;\n  }\n\n  const settings = (window as any).grafanaBootData.settings;\n  const awsAllowedAuthProviders = settings.awsAllowedAuthProviders ?? [\n    AwsAuthType.Default,\n    AwsAuthType.Keys,\n    AwsAuthType.Credentials,\n  ];\n  const awsAssumeRoleEnabled = settings.awsAssumeRoleEnabled ?? true;\n\n  const currentProvider = awsAuthProviderOptions.find((p) => p.value === options.jsonData.authType);\n\n  useEffect(() => {\n    // Make sure a authType exists in the current model\n    if (!currentProvider && awsAllowedAuthProviders.length) {\n      onOptionsChange({\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          authType: awsAllowedAuthProviders[0],\n        },\n      });\n    }\n  }, [currentProvider, options, onOptionsChange]);\n\n  useEffect(() => {\n    if (!loadRegions) {\n      return;\n    }\n\n    loadRegions().then((regions) => setRegions(regions.map(toOption)));\n  }, [loadRegions]);\n\n  return (\n    <FieldSet label={skipHeader ? '' : 'Connection Details'} data-testid=\"connection-config\">\n      <InlineField\n        label=\"Authentication Provider\"\n        labelWidth={28}\n        tooltip=\"Specify which AWS credentials chain to use.\"\n      >\n        <Select\n          className=\"width-30\"\n          value={currentProvider}\n          options={awsAuthProviderOptions.filter((opt) => awsAllowedAuthProviders.includes(opt.value!))}\n          defaultValue={options.jsonData.authType}\n          onChange={(option) => {\n            onUpdateDatasourceJsonDataOptionSelect(props, 'authType')(option);\n          }}\n        />\n      </InlineField>\n      {options.jsonData.authType === 'credentials' && (\n        <InlineField\n          label=\"Credentials Profile Name\"\n          labelWidth={28}\n          tooltip=\"Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.\"\n        >\n          <Input\n            className=\"width-30\"\n            placeholder=\"default\"\n            value={profile}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'profile')}\n          />\n        </InlineField>\n      )}\n\n      {options.jsonData.authType === 'keys' && (\n        <>\n          <InlineField label=\"Access Key ID\" labelWidth={28}>\n            {props.options.secureJsonFields?.accessKey ? (\n              <ButtonGroup className=\"width-30\">\n                <Input disabled placeholder=\"Configured\" />\n                <ToolbarButton\n                  icon=\"edit\"\n                  tooltip=\"Edit Access Key ID\"\n                  type=\"button\"\n                  onClick={onUpdateDatasourceResetOption(props as any, 'accessKey')}\n                />\n              </ButtonGroup>\n            ) : (\n              <Input\n                className=\"width-30\"\n                value={options.secureJsonData?.accessKey ?? ''}\n                onChange={onUpdateDatasourceSecureJsonDataOption(props, 'accessKey')}\n              />\n            )}\n          </InlineField>\n\n          <InlineField label=\"Secret Access Key\" labelWidth={28}>\n            {props.options.secureJsonFields?.secretKey ? (\n              <ButtonGroup className=\"width-30\">\n                <Input disabled placeholder=\"Configured\" />\n                <ToolbarButton\n                  icon=\"edit\"\n                  type=\"button\"\n                  tooltip=\"Edit Secret Access Key\"\n                  onClick={onUpdateDatasourceResetOption(props as any, 'secretKey')}\n                />\n              </ButtonGroup>\n            ) : (\n              <Input\n                className=\"width-30\"\n                value={options.secureJsonData?.secretKey ?? ''}\n                onChange={onUpdateDatasourceSecureJsonDataOption(props, 'secretKey')}\n              />\n            )}\n          </InlineField>\n        </>\n      )}\n\n      {awsAssumeRoleEnabled && (\n        <>\n          <InlineField\n            label=\"Assume Role ARN\"\n            labelWidth={28}\n            tooltip=\"Optionally, specify the ARN of a role to assume. Specifying a role here will ensure that the selected authentication provider is used to assume the specified role rather than using the credentials directly. Leave blank if you don't need to assume a role at all\"\n          >\n            <Input\n              className=\"width-30\"\n              placeholder=\"arn:aws:iam:*\"\n              value={options.jsonData.assumeRoleArn || ''}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'assumeRoleArn')}\n            />\n          </InlineField>\n          <InlineField\n            label=\"External ID\"\n            labelWidth={28}\n            tooltip=\"If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.\"\n          >\n            <Input\n              className=\"width-30\"\n              placeholder=\"External ID\"\n              value={options.jsonData.externalId || ''}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'externalId')}\n            />\n          </InlineField>\n        </>\n      )}\n      {!skipEndpoint && (\n        <InlineField label=\"Endpoint\" labelWidth={28} tooltip=\"Optionally, specify a custom endpoint for the service\">\n          <Input\n            className=\"width-30\"\n            placeholder={props.defaultEndpoint ?? 'https://{service}.{region}.amazonaws.com'}\n            value={options.jsonData.endpoint || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'endpoint')}\n          />\n        </InlineField>\n      )}\n      <InlineField\n        label=\"Default Region\"\n        labelWidth={28}\n        tooltip=\"Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.\"\n      >\n        <Select\n          className=\"width-30\"\n          value={regions.find((region) => region.value === options.jsonData.defaultRegion)}\n          options={regions}\n          defaultValue={options.jsonData.defaultRegion}\n          allowCustomValue={true}\n          onChange={onUpdateDatasourceJsonDataOptionSelect(props, 'defaultRegion')}\n          formatCreateLabel={(r) => `Use region: ${r}`}\n        />\n      </InlineField>\n      {props.children}\n    </FieldSet>\n  );\n};\n"]},"metadata":{},"sourceType":"script"}