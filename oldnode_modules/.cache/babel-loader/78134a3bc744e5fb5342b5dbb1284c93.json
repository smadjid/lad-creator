{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Madjid Sadallah\\\\Documents\\\\GitHub\\\\CoGenDash\\\\lad-creator\\\\src\\\\components\\\\library\\\\cpanels.js\",\n    _s = $RefreshSig$();\n\nimport \"./library-view.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Panels from \"./panels\";\nimport Actions from \"./panels_lib/cpanel_actions\";\nimport axios from \"axios\";\nimport { AddBoxRounded, EditRounded, HighlightOffRounded } from \"@material-ui/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CPanelContext = /*#__PURE__*/React.createContext();\n\nfunction CPanels() {\n  _s();\n\n  const [cpanels, setCPanels] = useState([]);\n  const [panels, setPanels] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [currentCPanel, setCurrentCPanel] = useState();\n  const [currentPanel, setCurrentPanel] = useState();\n  const [pList, setpList] = useState();\n  const cpanelContext = [currentCPanel, setCurrentCPanel, currentPanel, setCurrentPanel, pList, setpList, panels];\n  const [creationMode, setCreationMode] = useState(true);\n\n  const handleModalClose = () => {\n    setShowModal(false);\n  };\n\n  const addPanelsToCPanel = (p, cp) => {\n    console.log(p.id);\n    console.log(cp.id);\n  };\n\n  const handleModalSave = () => {\n    console.log(currentPanel.id); //  addPanelsToCPanel(currentCPanel.id, currentPanel.id );\n    //setCurrentCPanel({...currentCPanel,visualization_id:currentVisualization.id});\n\n    let element = currentCPanel;\n    let plist = {\n      cpanel_id: currentCPanel.id,\n      panel_id: currentPanel.id\n    }; //return;\n\n    if (creationMode) axios.post(\"http://localhost:3001/cpanels\", element).then(() => {\n      setCPanels([...cpanels, {\n        data: element,\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }]);\n      axios.post(\"http://localhost:3001/plist\", plist).then(() => {\n        alert('ok');\n      });\n      updateDisplay();\n    });else axios.put(\"http://localhost:3001/cpanels\", element).then(res => {\n      setCPanels(cpanels.map(item => {\n        return item.id === element.id ? {\n          id: item.id,\n          title: item.title,\n          description: item.description\n        } : item;\n      }));\n      updateDisplay();\n    });\n    setShowModal(false);\n    updateDisplay();\n  };\n\n  const deleteCPanel = id => {\n    window.confirm(\"Are you sure you want to delete this type of cpanel?\") ? axios.delete(`http://localhost:3001/cpanels/${id}`).then(res => {\n      setCPanels(cpanels.filter(item => {\n        return item.id !== id;\n      }));\n    }) : id = id;\n    updateDisplay();\n  };\n\n  const getCPanels = () => {\n    axios.get(\"http://localhost:3001/cpanels\").then(res => {\n      setCPanels(res.data);\n    });\n  };\n\n  const getPanels = () => {\n    axios.get(\"http://localhost:3001/panels\").then(res => {\n      setPanels(res.data);\n    });\n  };\n\n  const getpList = () => {\n    axios.get(\"http://localhost:3001/plist\").then(res => {\n      setpList(res.data);\n    });\n  };\n\n  useEffect(() => {\n    getCPanels();\n    getPanels();\n    getpList();\n  }, []);\n\n  const updateDisplay = () => {\n    getCPanels();\n    getPanels();\n  };\n\n  const decodeChart = blob => {\n    if (!blob) return;\n    if (typeof blob === \"string\") return blob;\n    const {\n      data\n    } = blob;\n    const img = new Buffer.from(data).toString(\"ascii\");\n    return img;\n  };\n\n  const fetchPanelElement = id => {\n    if (typeof id === \"undefined\") return {\n      title: null,\n      chart: null\n    };else {\n      let elt = panels.find(x => x.id === id);\n      if (elt) return elt;else return {\n        title: null,\n        description: null\n      };\n    }\n  };\n\n  const CreateNewCPanel = () => {\n    const item = {\n      title: \"NewPanel\",\n      description: \"Description\"\n    };\n    setCurrentCPanel(item);\n    setCreationMode(true);\n    setShowModal(true);\n    return;\n  };\n\n  const EditCPanel = item => {\n    return;\n    /* indicators.map((elt)=>{\r\n        if(elt.id == item.indicator_id) setCurrentIndicator(elt)\r\n    });\r\n        visualizations.map((elt)=>{\r\n        if(elt.id == item.visualization_id) setCurrentVisualization(elt)\r\n    }); */\n\n    setCurrentCPanel(item);\n    setCreationMode(false);\n    setShowModal(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CPanelContext.Provider, {\n    value: cpanelContext,\n    children: [/*#__PURE__*/_jsxDEV(Actions, {\n      title: \"un titre\",\n      show: showModal,\n      mode: \"Creation\",\n      cpanels: cpanels,\n      setCPanels: setCPanels,\n      updateDisplay: updateDisplay,\n      onClose: handleModalClose,\n      onSave: handleModalSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success\",\n        onClick: CreateNewCPanel,\n        children: [/*#__PURE__*/_jsxDEV(AddBoxRounded, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), \" \\xA0 New Composite Panel Type\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-bordered table-hover table-dark table-striped text-md-start\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"#\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Panels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: cpanels.map(item => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"row\",\n              children: item.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                children: fetchPanelElement(item.id).title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn btn-outline-success\",\n                onClick: () => EditCPanel(item),\n                children: \"Edit Panels\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-sm btn-outline-primary\",\n                onClick: () => EditCPanel(item),\n                children: /*#__PURE__*/_jsxDEV(EditRounded, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-sm btn-outline-danger\",\n                onClick: () => deleteCPanel(item.id),\n                children: /*#__PURE__*/_jsxDEV(HighlightOffRounded, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 17\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CPanels, \"d0uLlmgqx0pGACyuiTSyGrAypBU=\");\n\n_c = CPanels;\nexport default CPanels;\n\nvar _c;\n\n$RefreshReg$(_c, \"CPanels\");","map":{"version":3,"sources":["C:/Users/Madjid Sadallah/Documents/GitHub/CoGenDash/lad-creator/src/components/library/cpanels.js"],"names":["React","useState","useEffect","Panels","Actions","axios","AddBoxRounded","EditRounded","HighlightOffRounded","CPanelContext","createContext","CPanels","cpanels","setCPanels","panels","setPanels","showModal","setShowModal","currentCPanel","setCurrentCPanel","currentPanel","setCurrentPanel","pList","setpList","cpanelContext","creationMode","setCreationMode","handleModalClose","addPanelsToCPanel","p","cp","console","log","id","handleModalSave","element","plist","cpanel_id","panel_id","post","then","data","headers","alert","updateDisplay","put","res","map","item","title","description","deleteCPanel","window","confirm","delete","filter","getCPanels","get","getPanels","getpList","decodeChart","blob","img","Buffer","from","toString","fetchPanelElement","chart","elt","find","x","CreateNewCPanel","EditCPanel"],"mappings":"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","sourcesContent":["import \"./library-view.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Panels from \"./panels\";\r\nimport Actions from \"./panels_lib/cpanel_actions\";\r\nimport axios from \"axios\";\r\nimport {\r\n  AddBoxRounded,\r\n  EditRounded,\r\n  HighlightOffRounded,\r\n} from \"@material-ui/icons\";\r\n\r\nexport const CPanelContext = React.createContext();\r\n\r\nfunction CPanels() {\r\n  const [cpanels, setCPanels] = useState([]);\r\n  const [panels, setPanels] = useState([]);\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const [currentCPanel, setCurrentCPanel] = useState();\r\n  const [currentPanel, setCurrentPanel] = useState();\r\n  const [pList, setpList] = useState();\r\n\r\n  const cpanelContext = [\r\n    currentCPanel,\r\n    setCurrentCPanel,\r\n    currentPanel,\r\n    setCurrentPanel,\r\n    pList,\r\n    setpList,\r\n    panels,\r\n  ];\r\n\r\n  const [creationMode, setCreationMode] = useState(true);\r\n\r\n  const handleModalClose = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const addPanelsToCPanel = (p, cp)=>{\r\nconsole.log(p.id);\r\nconsole.log(cp.id)\r\n  }\r\n  const handleModalSave = () => {\r\n    console.log(currentPanel.id); \r\n  //  addPanelsToCPanel(currentCPanel.id, currentPanel.id );\r\n\r\n    //setCurrentCPanel({...currentCPanel,visualization_id:currentVisualization.id});\r\n     \r\n    let element = currentCPanel;\r\n    let plist = {\r\n      cpanel_id: currentCPanel.id,\r\n      panel_id: currentPanel.id};\r\n    //return;\r\n    if (creationMode)\r\n      axios.post(\"http://localhost:3001/cpanels\", element).then(() => {\r\n        setCPanels([\r\n          ...cpanels,\r\n          {\r\n            data: element,\r\n            headers: { \"Content-Type\": \"multipart/form-data\" },\r\n          },\r\n        ]);\r\n        axios.post(\"http://localhost:3001/plist\", plist).then(()=>{\r\n          alert('ok');\r\n        }\r\n\r\n        )\r\n        updateDisplay();\r\n      });\r\n    else\r\n      axios.put(\"http://localhost:3001/cpanels\", element).then((res) => {\r\n        setCPanels(\r\n          cpanels.map((item) => {\r\n            return item.id === element.id\r\n              ? {\r\n                  id: item.id,\r\n                  title: item.title,\r\n                  description: item.description,\r\n                }\r\n              : item;\r\n          })\r\n        );\r\n        updateDisplay();\r\n      });\r\n\r\n    setShowModal(false);\r\n    updateDisplay();\r\n  };\r\n\r\n  const deleteCPanel = (id) => {\r\n    window.confirm(\"Are you sure you want to delete this type of cpanel?\")\r\n      ? axios.delete(`http://localhost:3001/cpanels/${id}`).then((res) => {\r\n          setCPanels(\r\n            cpanels.filter((item) => {\r\n              return item.id !== id;\r\n            })\r\n          );\r\n        })\r\n      : (id = id);\r\n    updateDisplay();\r\n  };\r\n\r\n  const getCPanels = () => {\r\n    axios.get(\"http://localhost:3001/cpanels\").then((res) => {\r\n      setCPanels(res.data);\r\n    });\r\n  };\r\n\r\n  const getPanels = () => {\r\n    axios.get(\"http://localhost:3001/panels\").then((res) => {\r\n      setPanels(res.data);\r\n    });\r\n  };\r\n\r\n  const getpList = () => {\r\n    axios.get(\"http://localhost:3001/plist\").then((res) => {\r\n      setpList(res.data);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCPanels();\r\n    getPanels();\r\n    getpList();\r\n  }, []);\r\n\r\n  const updateDisplay = () => {\r\n    getCPanels();\r\n    getPanels();\r\n  };\r\n\r\n  const decodeChart = (blob) => {\r\n    if (!blob) return;\r\n    if (typeof blob === \"string\") return blob;\r\n    const { data } = blob;\r\n    const img = new Buffer.from(data).toString(\"ascii\");\r\n\r\n    return img;\r\n  };\r\n\r\n  const fetchPanelElement = (id) => {\r\n    \r\n    if (typeof id === \"undefined\") return { title: null, chart: null };\r\n    else {\r\n      let elt = panels.find((x) => x.id === id);\r\n      if (elt) return elt;\r\n      else return { title: null, description: null };\r\n    }\r\n  };\r\n\r\n  const CreateNewCPanel = () => {\r\n    const item = {\r\n      title: \"NewPanel\",\r\n      description: \"Description\",\r\n    };\r\n\r\n    setCurrentCPanel(item);\r\n    setCreationMode(true);\r\n    setShowModal(true);\r\n\r\n    return;\r\n  };\r\n  const EditCPanel = (item) => {\r\n    return;\r\n    /* indicators.map((elt)=>{\r\n        if(elt.id == item.indicator_id) setCurrentIndicator(elt)\r\n    });\r\n\r\n\r\n    visualizations.map((elt)=>{\r\n        if(elt.id == item.visualization_id) setCurrentVisualization(elt)\r\n    }); */\r\n\r\n    setCurrentCPanel(item);\r\n\r\n    setCreationMode(false);\r\n    setShowModal(true);\r\n  };\r\n  return (\r\n    <CPanelContext.Provider value={cpanelContext}>\r\n      <Actions\r\n        title=\"un titre\"\r\n        show={showModal}\r\n        mode=\"Creation\"\r\n        cpanels={cpanels}\r\n        setCPanels={setCPanels}\r\n        updateDisplay={updateDisplay}\r\n        onClose={handleModalClose}\r\n        onSave={handleModalSave}\r\n      />\r\n\r\n      <div>\r\n        <button className=\"btn btn-success\" onClick={CreateNewCPanel}>\r\n          <AddBoxRounded /> &nbsp; New Composite Panel Type\r\n        </button>\r\n      </div>\r\n      <table className=\"table table-bordered table-hover table-dark table-striped text-md-start\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Title</th>\r\n            <th scope=\"col\">Description</th>\r\n            <th scope=\"col\">Panels</th>\r\n            <th scope=\"col\">Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {cpanels.map((item) => {\r\n            return (\r\n              <tr key={item.id}>\r\n                <th scope=\"row\">{item.id}</th>\r\n                <td>{item.title}</td>\r\n                <td>{item.description}</td>\r\n                <td>\r\n                  {\" \"}\r\n                  <i>{fetchPanelElement(item.id).title}</i>\r\n                  {/*  <div className=\"chart_box\">                  \r\n                    <img alt=\"Chart\" src={decodeChart(fetchPanelElement(item.visualization_id).chart)} /> </div>*/}\r\n                </td>\r\n\r\n                <td>\r\n                <button\r\n                    className=\"btn btn btn-outline-success\"\r\n                    onClick={() => EditCPanel(item)}\r\n                  >\r\n                    Edit Panels\r\n                  </button>\r\n\r\n                  <button\r\n                    className=\"btn btn-sm btn-outline-primary\"\r\n                    onClick={() => EditCPanel(item)}\r\n                  >\r\n                    <EditRounded />\r\n                  </button>\r\n                  <button\r\n                    className=\"btn btn-sm btn-outline-danger\"\r\n                    onClick={() => deleteCPanel(item.id)}\r\n                  >\r\n                    <HighlightOffRounded />\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </CPanelContext.Provider>\r\n  );\r\n}\r\n\r\nexport default CPanels;\r\n"]},"metadata":{},"sourceType":"module"}